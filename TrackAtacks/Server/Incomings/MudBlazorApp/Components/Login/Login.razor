@page "/Login"
@layout LoginLayout
@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MudBlazorApp.Components.Account
@using MudBlazorApp.Components.Account.Shared
@using MudBlazorApp.Data
@using System.Text.RegularExpressions

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

@* <EditForm Model="Input" OnValidSubmit="LoginUser" FormName="login">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="Input.Email" Required="true" RequiredError="Email is required!"
                                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                    <MudTextField Label="Password" Required="true"
                                  RequiredError="Password is required!" Class="mt-3"
                                  @bind-Value="Input.Password" InputType="InputType.Password" />
                    <MudCheckBox T="bool" @bind-Value="Input.RememberMe" Label="I agree!" @rendermode="InteractiveServer"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm> *@
<div class="login-container">
    <div class="login-form-container">
        <h3>Login</h3>
        <section>
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <div>
                    <DataAnnotationsValidator />
                    <hr />
                    <div class="form-floating mb-3">
                        <div class="wrap-input">
                            <InputText @bind-Value="Input.Email" class="custom-input" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        </div>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <div class="wrap-input">
                            <InputText type="password" @bind-Value="Input.Password" class="custom-input" autocomplete="current-password" aria-required="true" placeholder="password" />
                        </div>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                    </div>
                    <div>
                        <p>
                            <a href="Account/ForgotPassword">Forgot your password?</a>
                        </p>
                    </div>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    bool success;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, false, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Console.WriteLine("login falhou");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}
